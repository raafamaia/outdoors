/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

Dark: #0C1631
Orange: #ED623B
Light: #F1E5C2
Yellow: #DCAA2D

*/

$color-primary: #dcaa2d;
$color-primary-light: #f1e5c2;
$color-primary-dark: #ed623b;

$color-gray-dark: #777;
$color-white: #fff;
$color-black: #000;

/* CSS Resetting Margin and Padding */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

html {
  // Default font-size of browsers is 16px;
  // Here we are  setting the font-size to 10px (62.5% of 16px), which will help us using 'rem'.
  font-size: 62.5%;
}

body {
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  /* font-size: 16rem; */
  line-height: 1.7;
  color: $color-gray-dark;

  // rem uses the font-size to determine the size, so 3rem is 3 * font-size, which is default to 10px;
  padding: 3rem;
  box-sizing: border-box;
}

.header {
  height: 95vh;
  /* You can apply a background image with a linear gradient, just put what you want to have on the top first, 
  and then what you want to have in the back. */
  /* background-image: linear-gradient(to right bottom, #7ed56fc7, #28b485c7), */
  background-image: linear-gradient(
      to right bottom,
      rgba($color-primary-light, 0.8),
      rgba($color-primary-dark, 0.8)
    ),
    url(../img/outdoors/bg-1.png);

  /* It says that you want the image to cover all the space */
  background-size: cover;

  /* The top of the image always appears */
  background-position: center;
  position: relative;

  /* This is how clip-path work, you can pass a geometric box to it, in this case a polygon, 
  where we can set the four points where the container should exists, and everything out will be cliped. 
  The four points rotate clockwise, the first being the top left corner.*/
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);

  &__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem;
  }

  /* This is how we center elements.
    First apply a position absolute with 50% 50% on top and left
    You'll see that the element is not centralized, but the X 0 and Y 0 of the element is.
    Then we'll transform that element, shifting the X 0 and Y 0 to the center with translate(-50%, -50%) */
  &__text-box {
    position: absolute;

    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);

    text-align: center;
  }

  &__logo {
    height: 3.5rem;
  }
}

.heading-primary {
  color: $color-white;
  text-transform: uppercase;

  backface-visibility: hidden;

  margin-bottom: 6rem;

  &--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;

    /* Applying animation */
    animation: moveInLeft 1s ease-out; /* ease-out: start faster, end slower */
    /* animation-name: moveInLeft; */
    /* animation-duration: 1s; */
    /* animation-timing-function: ease-out; */

    /* Wait for tha animation to start */
    /* animation-delay: 3s; */

    /* How many times the animatio will play */
    /* animation-iteration-count: 3; */
  }

  &--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;

    animation: moveInRight 1s ease-out; /* ease-out: start faster, end slower */
    /* animation-name: moveInRight; */
    /* animation-duration: 1s; */
    /* animation-timing-function: ease-out;*/
  }
}

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }

  /* Bounce effect, putting X 10px further */
  80% {
    transform: translateX(1rem);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }

  /* Bounce effect, putting X 10px further */
  80% {
    transform: translateX(-1rem);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

/* When select a link, use pseudo element :link
We also want to style the visited state, to be the same */
.btn {
  &:link,
  &:visited {
    text-transform: uppercase;
    text-decoration: none;

    font-size: 1.6rem;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;

    /* When not sure of the transition state, use all */
    transition: all 0.2s;

    position: relative;
  }

  &:hover {
    /* Y going up is negative value */
    transform: translateY(-0.3rem);
    box-shadow: 0 1rem 2rem rgba($color-black, 0.2);

    &::after {
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0;
    }
  }

  &:active {
    transform: translateY(-1rem);
    box-shadow: 0 0.5rem 1rem rgba($color-black, 0.2);
  }

  &--white {
    background-color: $color-white;
    color: $color-gray-dark;

    &::after {
      background-color: $color-white;
    }
  }

  &::after {
    content: '';
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 100px;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;

    transition: all 0.4s;
  }

  &--animated {
    animation: moveInBottom 0.5s ease-out 0.75s;
    animation-fill-mode: backwards;
  }
}
